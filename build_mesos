#!/bin/bash
set -o errexit -o nounset -o pipefail
export LC_ALL=C
function -h {
cat <<USAGE
 USAGE: build_mesos

  In the first form, performs a build in a temporary directory and creates a
  package.

USAGE
}; function --help { -h ;}

this="$(cd "$(dirname "$0")" && pwd -P)"
name=mesos
version=0.16.0

needs_build=true

function main {
  cleanup
  checkout
  if [[ $needs_build == "true" ]]; then
    build
  fi
  create_installation
  pkg
  finish
}

function cleanup {
  pwd="$(pwd -P)"
  rm -f *.deb
}

function checkout {
  repo_dir="mesos"
  if [[ -d $repo_dir ]]
  then 
    msg "Dir ${repo_dir} exists"
    cd $repo_dir
    local gitst=`git pull | tail -n 1`
    if [[ "$gitst" == "Already up-to-date." ]]; then
      if [[ -d ${repo_dir}/build/src ]]; then
	needs_build=false
        msg "Building is not necessary. Skipping."
      fi
    fi
  else 
    git clone git://github.com/apache/mesos.git
    cd $repo_dir
  fi
  ( git --no-pager log --pretty=format:"%h%x09%an%x09%ad%x09%s" --decorate --graph > "$pwd/gitlog" && "$@" )
}

function build {(
  local pwd="$(pwd -P)"
  autoreconf -f -i -Wall,no-obsolete
  ./bootstrap
  mkdir -p build
  cd build
  ../configure
  make
  mkdir -p "$pwd"/deb
  ( make install DESTDIR="$pwd"/deb )
)}

function finish {
  echo "removing build directory"
  #remove build directory
  rm -rf "$repo_dir"
}


function lsb_release_tag {
  lsb_release --id --release | cut -d: -f2 | tr A-Z a-z | xargs | tr ' ' '/'
}

function create_installation {(
  cd deb
  mkdir -p usr/share/doc/mesos etc/default etc/mesos var/log/mesos
  cp ../CHANGELOG               usr/share/doc/mesos/
  cp "$this"/gitlog  usr/share/doc/mesos
  cp "$this"/default/mesos         etc/default/
  cp "$this"/conf/master  etc/mesos/master.conf
  cp "$this"/conf/slave  etc/mesos/slave.conf
  #echo zk://localhost:2181/mesos > etc/mesos/zk #path must be relative
  init_scripts "$linux"
  logrotate "$linux"
  jars
)}

function init_scripts {
  case "$1" in
    debian/*) mkdir -p etc/init.d
              cp -p "$this"/debian/master.init etc/init.d/mesos-master
              cp -p "$this"/debian/slave.init etc/init.d/mesos-slave ;;
    ubuntu/*) mkdir -p etc/init
              cp "$this"/ubuntu/master.upstart etc/init/mesos-master.conf
              cp "$this"/ubuntu/slave.upstart etc/init/mesos-slave.conf ;;
    *) err "Not sure how to make init scripts for: $1" ;;
  esac
}

function jars {
  local mesos_jar="../build/src/mesos-*.jar"
  if [[ -f $mesos_jar ]]; then
    mkdir -p usr/share/java/
    mv ../build/src/mesos-*.jar usr/share/java/
  fi
}

function pkg {
  case "$linux" in
    ubuntu/*|debian/*) deb_ ;;
    centos/*|redhat/*) rpm_ ;;
    *)                 err "Not sure how to package for: $linux" ;;
  esac
}

function architecture {
  case "$linux" in
    ubuntu/*|debian/*) dpkg-architecture -qDEB_BUILD_ARCH ;;
    centos/*|redhat/*) arch ;;
    *)                 err "Not sure how to determine arch for: $linux" ;;
  esac
}

function find_gem_bin {
  gem env | sed -n '/^ *- EXECUTABLE DIRECTORY: */ { s/// ; p }'
}

function logrotate {
  case "$linux" in
    ubuntu/*|debian/*)
      mkdir -p etc/logrotate.d
      cp "$this"/debian/logrotate etc/logrotate.d/mesos 
    ;;
    centos/*|redhat/*) 
      err "not implemented yet"
    ;;
    *)                 err "Not sure how to configure logrotate for: $linux" ;;
  esac
}

function get_codename {
  case "$linux" in
    ubuntu/*|debian/*)
      lsb_release -c | cut -d: -f2 | tr A-Z a-z | xargs | tr ' ' '/'
    ;;
    centos/*|redhat/*)
      err "not implemented yet"
    ;;
    *)                 err "Not sure how to configure logrotate for: $linux" ;;
  esac
}

function deb_ {
  local version="$version-$codename"
  if git rev-parse --git-dir &>/dev/null
  then version="$version~$(git log -n1 --format=%h)"
  fi
  local opts=()
  pkg="$name"_"$version"_"$arch".deb
  opts=( -t deb
         -n "$name"
         -v "$version"
         --description
"Cluster resouce manager with efficient resource isolation
 Apache Mesos is a cluster manager that offers efficient resource isolation
 and sharing across distributed applications, or frameworks. It can run
 Hadoop, MPI, Hypertable, Spark (a new framework for low-latency interactive
 and iterative jobs), and other applications."
         --url=http://incubator.apache.org/mesos/
         -a "$arch"
         --category misc
         --vendor ""
         -m mesos-dev@incubator.apache.org
         --prefix=/
         --deb-recommends "python >= 2.6"
         --deb-suggests zookeeper
         --deb-suggests zookeeperd
         --deb-suggests zookeeper-bin
         -d "libcurl3"
         -d "default-jre"
         -d "libunwind7|libunwind8"         
         --before-install "$this/debian/mesos.preinst"
         --after-install "$this/debian/mesos.postinst"
         --before-remove "$this/debian/mesos.prerm"
         --after-remove "$this/debian/mesos.postrm"
         -s dir )
  ( cd deb && "$gem_bin"/fpm "${opts[@]}" -p "$this"/"$pkg" -- . )
}

function rpm_ {
  err "Not implemented."
}

function upload {
  local url="$1"/"$linux"/"$pkg"
  curl -X PUT "$url" --data-binary @"$2" >/dev/null
  out "$url"
}

function get_system_info {
  linux="$(lsb_release_tag)"            # <distro>/<version>, like ubuntu/12.10
  arch="$(architecture)"          # In the format used to label distro packages
  gem_bin="$(find_gem_bin)"                          # Might not be on the PATH
  codename="$(get_codename)"
}

function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}

if [[ ${1:-} ]] && declare -F | cut -d' ' -f3 | fgrep -qx -- "${1:-}"
then
  case "$1" in
    -h|--help) : ;; # Skip system info lookup
    *)         get_system_info ;;
  esac
  "$@"
else
  get_system_info
  main "$@"
fi

